<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Infrastructure as Code - Brief_Byte</title><link href="https://infrastructureascode.ch/" rel="alternate"></link><link href="https://infrastructureascode.ch/feeds/brief_byte.atom.xml" rel="self"></link><id>https://infrastructureascode.ch/</id><updated>2024-04-19T20:28:00+02:00</updated><entry><title>CI/CD pipeline to update README.md with terraform-docs</title><link href="https://infrastructureascode.ch/cicd-pipeline-to-update-readmemd-with-terraform-docs.html" rel="alternate"></link><published>2024-04-19T20:28:00+02:00</published><updated>2024-04-19T20:28:00+02:00</updated><author><name>juntersander</name></author><id>tag:infrastructureascode.ch,2024-04-19:/cicd-pipeline-to-update-readmemd-with-terraform-docs.html</id><summary type="html">&lt;p&gt;In my journey to automate as much as possible, I stumbled upon the problem of keeping the terraform documentation in my README.md up to date with the terraform code.
I thought that should be easy, but as it turns out not as easy as I hoped. (At least for …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In my journey to automate as much as possible, I stumbled upon the problem of keeping the terraform documentation in my README.md up to date with the terraform code.
I thought that should be easy, but as it turns out not as easy as I hoped. (At least for now)&lt;/p&gt;
&lt;p&gt;Currently, the simplest way seems to be the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a ssh-key:
    &lt;code&gt;ssh-keygen -t ed25519 -f ./deploy-key&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Store the public key as a deploy key in the gitlab project settings (&lt;code&gt;Settings/Repository/Deploy keys&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Create a CI/CD variable and call it DEPLOY_KEY.
   Make sure that it's of type "File" and use the private key as value. Be sure to also include the last newline otherwise you will get a `Load Key "path/to/privatekey" error in libcrypto&lt;/li&gt;
&lt;li&gt;Update &lt;code&gt;.gitlab-ci.yml&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;update-docs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;validate&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;alpine:3.19.1&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;before_script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;apk update &amp;amp;&amp;amp; apk add --no-cache git curl tar openssh-client-default&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;curl -sSLo /terraform-docs.tar.gz https://terraform-docs.io/dl/v0.17.0/terraform-docs-v0.17.0-$(uname)-amd64.tar.gz&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tar -xzf /terraform-docs.tar.gz --directory=/&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;mv /terraform-docs ./terraform-docs&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;chmod +x terraform-docs&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;./terraform-docs markdown table --output-file README.md --output-mode inject .&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="no"&gt;# Check if README.md has been modified by terraform-doc&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="no"&gt;if git diff --name-only | grep -q &amp;quot;README.md&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="no"&gt;then&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;# Commit and push with ci.skip option&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;git config --global user.email &amp;quot;tf-bot@ost.ch&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;git config --global user.name &amp;quot;tf-bot&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;git config --global core.sshCommand &amp;#39;ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;git remote set-url origin ssh://git@${CI_SERVER_SHELL_SSH_HOST}:${CI_SERVER_SHELL_SSH_PORT}/${CI_PROJECT_PATH}.git&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;mkdir -p ~/.ssh&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;cp ${DEPLOY_KEY} ~/.ssh/id_ed25519&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;chmod 600 ~/.ssh/id_ed25519&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;git add README.md&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;git commit -m &amp;quot;Update README.md with terraform-doc&amp;quot; --no-verify&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;git push origin HEAD:${CI_COMMIT_BRANCH} -o ci.skip&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="no"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This could be improved and simplified in the future if the &lt;code&gt;CI_JOB_TOKEN&lt;/code&gt; has the permissions to also push to the repository.
It's an open issue on gitlab &lt;a href="https://gitlab.com/gitlab-org/gitlab/-/issues/389060"&gt;https://gitlab.com/gitlab-org/gitlab/-/issues/389060&lt;/a&gt;&lt;/p&gt;</content><category term="Brief_Byte"></category><category term="Terraform"></category><category term="GitLab"></category><category term="CI/CD"></category></entry><entry><title>NetAut-FS24 lecture recording</title><link href="https://infrastructureascode.ch/netaut-fs24-lecture-recording.html" rel="alternate"></link><published>2024-03-25T16:28:00+01:00</published><updated>2024-03-25T16:28:00+01:00</updated><author><name>ubaumann</name></author><id>tag:infrastructureascode.ch,2024-03-25:/netaut-fs24-lecture-recording.html</id><summary type="html">&lt;p&gt;This semester (February 19, 2024, to June 7, 2024), I am once again instructing the module on &lt;a href="https://studien.rj.ost.ch/allModules/public/39128_M_NetAut.html"&gt;Network Automation&lt;/a&gt; for Bachelor of Computer Science students at the &lt;a href="https://www.ost.ch/en/education/computer-science/bachelor-computer-science"&gt;Eastern Switzerland University of Applied Sciences&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;All 14 lectures will be recorded and made available on the &lt;a href="https://www.youtube.com/playlist?list=PLzfw9fKKFW9eYgg1W6-gL6llxBGTXD8fs"&gt;YouTube Playlist&lt;/a&gt; to ensure accessibility and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This semester (February 19, 2024, to June 7, 2024), I am once again instructing the module on &lt;a href="https://studien.rj.ost.ch/allModules/public/39128_M_NetAut.html"&gt;Network Automation&lt;/a&gt; for Bachelor of Computer Science students at the &lt;a href="https://www.ost.ch/en/education/computer-science/bachelor-computer-science"&gt;Eastern Switzerland University of Applied Sciences&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;All 14 lectures will be recorded and made available on the &lt;a href="https://www.youtube.com/playlist?list=PLzfw9fKKFW9eYgg1W6-gL6llxBGTXD8fs"&gt;YouTube Playlist&lt;/a&gt; to ensure accessibility and flexibility for students. This enables them to catch up on missed lectures or review lessons before exams (and yes, the videos can be watched at 1.75 times the speed 😉). Additionally, anyone interested can also access and benefit from the videos.&lt;/p&gt;
&lt;p&gt;Each lecture is condensed into a 45-minute session, limiting the depth of detail I can cover. Consequently, students are encouraged to engage in self-study by consulting relevant documentation and provided reading lists for each topic. The lectures are complemented by practical exercises and two graded automation projects. Both slides and exercises are accessible on the university's GitLab server and are typically updated shortly before each lecture. The latest PDFs can be found via the CI/CD pipeline. Repositories: &lt;a href="https://gitlab.ost.ch/netaut"&gt;NetAut&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I am pleased to announce that the first five lecture videos have already been uploaded. Please note that the remaining nine videos will be released every Friday, except for Good Friday (March 29) and the semester break (April 12), until June 7th.&lt;/p&gt;
&lt;h2&gt;Week 1: Kickoff, YAML, Jinja2&lt;/h2&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/Cix9rUn_IwE?si=QdwrF1HSG3TzRJgO" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;Week 2: Intro to Network Automation Tools/Frameworks/Solutions&lt;/h2&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/X6dgLYEtTAM?si=DUWH9b1WZlXHS_1M" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;Week 3: Guest Lecture Ivan Pepelnjakt - Real-Flife Network Automation&lt;/h2&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/T4gPoSqaCHU?si=v-ZXx1iulCe95E0t" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;Week 4: Ansible for Network Automation&lt;/h2&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/ROIzL6fqBdE?si=DKufvSgg61c42RQB" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;Week 5: Nornir&lt;/h2&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/-kqybIyKp7Q?si=CrTQb9bbZUo9itnV" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen&gt;&lt;/iframe&gt;</content><category term="Brief_Byte"></category><category term="NetAut"></category></entry><entry><title>Facelifting for the sandboxes</title><link href="https://infrastructureascode.ch/facelifting-for-the-sandboxes.html" rel="alternate"></link><published>2024-01-17T18:03:00+01:00</published><updated>2024-01-17T18:03:00+01:00</updated><author><name>ubaumann</name></author><id>tag:infrastructureascode.ch,2024-01-17:/facelifting-for-the-sandboxes.html</id><content type="html">&lt;p&gt;The InfrastructureAsCode sandboxes received a facelifting.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jinja101.infrastructureascode.ch"&gt;jinja101.infrastructureascode.ch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ttp101.infrastructureascode.ch"&gt;ttp101.infrastructureascode.ch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://textfsm101.infrastructureascode.ch"&gt;textfsm101.infrastructureascode.ch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="jinja101 sandbox look" src="https://infrastructureascode.ch/images/202401_sandbox.png"&gt;&lt;/p&gt;</content><category term="Brief_Byte"></category><category term="sandbox"></category></entry><entry><title>Pydantics Version 2's BeforeValidator and AliasPath</title><link href="https://infrastructureascode.ch/pydantics-version-2s-beforevalidator-and-aliaspath.html" rel="alternate"></link><published>2024-01-11T19:31:00+01:00</published><updated>2024-01-11T19:31:00+01:00</updated><author><name>ubaumann</name></author><id>tag:infrastructureascode.ch,2024-01-11:/pydantics-version-2s-beforevalidator-and-aliaspath.html</id><content type="html">&lt;p&gt;🚀 Loving #Pydantic! 😊 Version 2's BeforeValidator and AliasPath are game-changers, making data structure transformations a breeze. Excited about the efficiency and joy it brings to #Python #NetworkAutomation! 💻✨&lt;/p&gt;
&lt;p&gt;&lt;img alt="Code example Pydantic V2" src="https://infrastructureascode.ch/images/202401_pydantic_v2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;The model &lt;code&gt;MyModel&lt;/code&gt; transforms the complex &lt;code&gt;ietf-interfaces&lt;/code&gt; data structure into a simple Pydantic model which can be dumped as JSON again if needed. &lt;/p&gt;</content><category term="Brief_Byte"></category><category term="Python"></category><category term="Pydantic"></category></entry><entry><title>NUTS is listed as PyTest plugin</title><link href="https://infrastructureascode.ch/nuts-is-listed-as-pytest-plugin.html" rel="alternate"></link><published>2023-08-21T20:29:00+02:00</published><updated>2023-08-21T20:29:00+02:00</updated><author><name>ubaumann</name></author><id>tag:infrastructureascode.ch,2023-08-21:/nuts-is-listed-as-pytest-plugin.html</id><content type="html">&lt;p&gt;PyTest has 1311 plugins listed on their documentation. 🤯&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.pytest.org/en/latest/reference/plugin_list.html"&gt;https://docs.pytest.org/en/latest/reference/plugin_list.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And now, the Network Unit Testing System (&lt;a href="https://github.com/network-unit-testing-system/nuts"&gt;NUTS&lt;/a&gt;) is also listed 😉&lt;/p&gt;</content><category term="Brief_Byte"></category><category term="NUTS"></category><category term="Python"></category><category term="testing"></category></entry><entry><title>WEmulate container</title><link href="https://infrastructureascode.ch/wemulate-container.html" rel="alternate"></link><published>2023-08-17T16:18:00+02:00</published><updated>2023-08-17T16:18:00+02:00</updated><author><name>ubaumann</name></author><id>tag:infrastructureascode.ch,2023-08-17:/wemulate-container.html</id><content type="html">&lt;p&gt;WEmulate (&lt;a href="https://wemulate.github.io/wemulate/"&gt;https://wemulate.github.io/wemulate/&lt;/a&gt;), a simple and modern WAN emulator, can now also be used in a container. &lt;/p&gt;
&lt;p&gt;I created a demo setup with &lt;a href="containerlab.dev"&gt;containerlab&lt;/a&gt; to demonstrate and try it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/wemulate/wemulate-containerlab-demo"&gt;https://github.com/wemulate/wemulate-containerlab-demo&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="WEmulate container demo" src="https://infrastructureascode.ch/images/202308_wemulate_container.gif"&gt;&lt;/p&gt;</content><category term="Brief_Byte"></category><category term="tools"></category></entry><entry><title>NUTS v3.2.0</title><link href="https://infrastructureascode.ch/nuts-v320.html" rel="alternate"></link><published>2023-08-11T18:15:00+02:00</published><updated>2023-08-11T18:15:00+02:00</updated><author><name>ubaumann</name></author><id>tag:infrastructureascode.ch,2023-08-11:/nuts-v320.html</id><content type="html">&lt;p&gt;!!! Network Unit Test System (NUTS) version 3.2.0 released. !!!🥳
&lt;a href="https://github.com/network-unit-testing-system"&gt;https://github.com/network-unit-testing-system&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Finally, "groups" and "tags" can be used to create tests for multiple devices with a single test definition.&lt;/p&gt;
&lt;p&gt;&lt;img alt="YAML unfolding tests" src="https://infrastructureascode.ch/images/202308_nuts_unfold.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/network-unit-testing-system/nuts/releases/tag/v3.2.0"&gt;Release notes for Nuts 3.2.0&lt;/a&gt;&lt;/p&gt;</content><category term="Brief_Byte"></category><category term="NUTS"></category><category term="Python"></category><category term="testing"></category></entry><entry><title>Video: Network Automation with CI/CD</title><link href="https://infrastructureascode.ch/video-network-automation-with-cicd.html" rel="alternate"></link><published>2023-06-08T11:22:00+02:00</published><updated>2023-06-08T11:22:00+02:00</updated><author><name>ubaumann</name></author><id>tag:infrastructureascode.ch,2023-06-08:/video-network-automation-with-cicd.html</id><content type="html">&lt;p&gt;&lt;a href="https://www.linkedin.com/in/jan-untersander-b98a6b113/"&gt;Jan Untersander&lt;/a&gt;, one of the NetAut students, published a video demonstrating how he used CI/CD, Nornir and Netconf to automate the network lab.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=O5MlCu6hOs8"&gt;https://www.youtube.com/watch?v=O5MlCu6hOs8&lt;/a&gt;&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/O5MlCu6hOs8?si=7zKNKsZ5lD6YqOrA" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen&gt;&lt;/iframe&gt;</content><category term="Brief_Byte"></category><category term="NetAut"></category><category term="video"></category><category term="CICD"></category><category term="Nornir"></category><category term="Netconf"></category></entry><entry><title>git-bisect</title><link href="https://infrastructureascode.ch/git-bisect.html" rel="alternate"></link><published>2022-10-04T12:36:00+02:00</published><updated>2022-10-04T12:36:00+02:00</updated><author><name>ubaumann</name></author><id>tag:infrastructureascode.ch,2022-10-04:/git-bisect.html</id><content type="html">&lt;p&gt;&lt;a href="git-scm.com/docs/git-bisect"&gt;git-bisect&lt;/a&gt; is a great way to find the commit that introduces a bug/feature. It uses a binary search to find the commit. You can use it "manually" or much better with a command to test.&lt;/p&gt;
&lt;p&gt;&lt;img alt="git-bisect demo" src="https://infrastructureascode.ch/images/202210_git_bisect.jpg"&gt;&lt;/p&gt;</content><category term="Brief_Byte"></category><category term="git"></category></entry><entry><title>nornir-rich v0.1.5</title><link href="https://infrastructureascode.ch/nornir-rich-v015.html" rel="alternate"></link><published>2022-10-02T11:37:00+02:00</published><updated>2022-10-02T11:37:00+02:00</updated><author><name>ubaumann</name></author><id>tag:infrastructureascode.ch,2022-10-02:/nornir-rich-v015.html</id><content type="html">&lt;p&gt;The patch version 0.1.5 of &lt;code&gt;nornir-rich&lt;/code&gt; has just been released.&lt;/p&gt;
&lt;p&gt;Now the title of the progress bar is set according to the ongoing task.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/InfrastructureAsCode-ch/nornir_rich/releases/tag/v0.1.5"&gt;Release Notes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="nornir-rich progressbar" src="https://infrastructureascode.ch/images/202210_nornir_rich_progressbar.png"&gt;&lt;/p&gt;</content><category term="Brief_Byte"></category><category term="Nornir"></category></entry><entry><title>NetTowel Day</title><link href="https://infrastructureascode.ch/nettowel-day.html" rel="alternate"></link><published>2022-05-25T16:17:00+02:00</published><updated>2022-05-25T16:17:00+02:00</updated><author><name>ubaumann</name></author><id>tag:infrastructureascode.ch,2022-05-25:/nettowel-day.html</id><summary type="html">&lt;h1&gt;Happy Towel Day!&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/InfrastructureAsCode-ch/nettowel"&gt;&lt;code&gt;nettowel&lt;/code&gt;&lt;/a&gt; is a collection of useful network automation functions. The Python project started with a need to combine some scripts used to demonstrate network automation functions like rendering templates or screen scraping. &lt;/p&gt;
&lt;p&gt;Hopefully, the function scope will evolve over time. So far the following function scopes are …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Happy Towel Day!&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/InfrastructureAsCode-ch/nettowel"&gt;&lt;code&gt;nettowel&lt;/code&gt;&lt;/a&gt; is a collection of useful network automation functions. The Python project started with a need to combine some scripts used to demonstrate network automation functions like rendering templates or screen scraping. &lt;/p&gt;
&lt;p&gt;Hopefully, the function scope will evolve over time. So far the following function scopes are available and under construction:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;jinja&lt;/li&gt;
&lt;li&gt;ttp&lt;/li&gt;
&lt;li&gt;textfsm&lt;/li&gt;
&lt;li&gt;napalm&lt;/li&gt;
&lt;li&gt;netmiko&lt;/li&gt;
&lt;li&gt;scrapli&lt;/li&gt;
&lt;li&gt;nornir&lt;/li&gt;
&lt;li&gt;pandas&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Rendering Jinja2 Template&lt;/h2&gt;
&lt;p&gt;&lt;img alt="renderin jinja2 template with nettowel" src="https://infrastructureascode.ch/images/202205_nettowel_jinja.png"&gt;&lt;/p&gt;
&lt;h2&gt;Execute CLI command with Netmiko&lt;/h2&gt;
&lt;p&gt;&lt;img alt="execute cli command with netmiko and nettowel" src="https://infrastructureascode.ch/images/202205_nettowel_netmiko.png"&gt;&lt;/p&gt;
&lt;h2&gt;Screen Scaping with TTP&lt;/h2&gt;
&lt;p&gt;&lt;img alt="convert cli output to structered text with nettowel" src="https://infrastructureascode.ch/images/202205_nettowel_ttp.png"&gt;&lt;/p&gt;
&lt;h2&gt;Execute RestConf calls&lt;/h2&gt;
&lt;p&gt;&lt;img alt="get restconf data with nettowel" src="https://infrastructureascode.ch/images/202205_nettowel_restconf.png"&gt;&lt;/p&gt;
&lt;p&gt;More details and screenshots can be found on the GitHub page &lt;a href="https://github.com/InfrastructureAsCode-ch/nettowel"&gt;InfrastructureAsCode-ch/nettowel&lt;/a&gt;.&lt;/p&gt;</content><category term="Brief_Byte"></category><category term="tools"></category><category term="nettowel"></category></entry><entry><title>Typer file autocompletion workaround</title><link href="https://infrastructureascode.ch/typer-file-autocompletion-workaround.html" rel="alternate"></link><published>2022-05-07T16:36:00+02:00</published><updated>2022-05-08T20:14:00+02:00</updated><author><name>ubaumann</name></author><id>tag:infrastructureascode.ch,2022-05-07:/typer-file-autocompletion-workaround.html</id><content type="html">&lt;p&gt;I like &lt;a href="https://typer.tiangolo.com/"&gt;Typer&lt;/a&gt;'s "autocompletion", but it looks like there is a problem in the underlying lib "click-completion" with file path completion.&lt;/p&gt;
&lt;p&gt;So I wrote a workaround. Maybe someone knows a better solution, but so far it works fine.&lt;/p&gt;
&lt;p&gt;&lt;img alt="code sample with auto-complete for typer" src="https://infrastructureascode.ch/images/202205_typer_autocompletion.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/InfrastructureAsCode-ch/nettowel/blob/d569122472bf1903c06708e266f8deb6ba5947ba/nettowel/cli/_common.py#L43"&gt;Example usage in &lt;code&gt;nettowel&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;</content><category term="Brief_Byte"></category><category term="Python"></category></entry><entry><title>fstring.help</title><link href="https://infrastructureascode.ch/fstringhelp.html" rel="alternate"></link><published>2022-04-13T11:07:00+02:00</published><updated>2022-04-13T11:07:00+02:00</updated><author><name>ubaumann</name></author><id>tag:infrastructureascode.ch,2022-04-13:/fstringhelp.html</id><content type="html">&lt;p&gt;&lt;a href="https://twitter.com/the_compiler/status/1513902859091427331"&gt;&lt;code&gt;@the_compiler&lt;/code&gt;&lt;/a&gt; announced the launch of &lt;a href="https://fstring.help/"&gt;fstring&lt;/a&gt;.help](https://fstring.help/). It is a simple tutorial and cheat sheet for the Python &lt;code&gt;f-string&lt;/code&gt; syntax. &lt;/p&gt;</content><category term="Brief_Byte"></category><category term="Python"></category></entry><entry><title>Use dotenv as a configuration file for your Typer tool</title><link href="https://infrastructureascode.ch/use-dotenv-as-a-configuration-file-for-your-typer-tool.html" rel="alternate"></link><published>2022-03-13T14:03:00+01:00</published><updated>2022-03-13T14:03:00+01:00</updated><author><name>ubaumann</name></author><id>tag:infrastructureascode.ch,2022-03-13:/use-dotenv-as-a-configuration-file-for-your-typer-tool.html</id><content type="html">&lt;p&gt;The &lt;a href="https://pypi.org/project/python-dotenv/"&gt;dotenv&lt;/a&gt; file can be used as a configuration file for your &lt;a href="https://typer.tiangolo.com/"&gt;Typer&lt;/a&gt; Python CLI tool (or any other tool using environment variables).&lt;/p&gt;
&lt;p&gt;Just use &lt;code&gt;python-dotenv&lt;/code&gt; and load the dotenv file before starting the application in your code.&lt;/p&gt;
&lt;p&gt;&lt;img alt="code sample using dotenv before starting the typer app" src="https://infrastructureascode.ch/images/202203_typer_dotenv.jpg"&gt;&lt;/p&gt;</content><category term="Brief_Byte"></category><category term="Python"></category></entry><entry><title>JC converts Linux command output to JSON</title><link href="https://infrastructureascode.ch/jc-converts-linux-command-output-to-json.html" rel="alternate"></link><published>2022-02-02T19:18:00+01:00</published><updated>2022-02-02T19:18:00+01:00</updated><author><name>ubaumann</name></author><id>tag:infrastructureascode.ch,2022-02-02:/jc-converts-linux-command-output-to-json.html</id><content type="html">&lt;p&gt;&lt;a href="https://github.com/kellyjonbrazil/jc"&gt;JC&lt;/a&gt; is a Python tool for converting Linux command output to JSON. JC contains many parsers for Linux tools to "JSONify" their output. This can simplify scripts and there is even an &lt;a href="https://docs.ansible.com/ansible/latest/collections/community/general/jc_filter.html#ansible-collections-community-general-jc-filter"&gt;Ansible filter&lt;/a&gt; available.&lt;/p&gt;
&lt;p&gt;&lt;img alt="example usage of jc" src="https://infrastructureascode.ch/images/202202_jc.jpg"&gt;&lt;/p&gt;</content><category term="Brief_Byte"></category><category term="tools"></category></entry><entry><title>Python built-in next supports default value</title><link href="https://infrastructureascode.ch/python-built-in-next-supports-default-value.html" rel="alternate"></link><published>2021-08-17T15:31:00+02:00</published><updated>2021-08-17T15:31:00+02:00</updated><author><name>ubaumann</name></author><id>tag:infrastructureascode.ch,2021-08-17:/python-built-in-next-supports-default-value.html</id><content type="html">&lt;p&gt;Python built-in next function supports default value for exhausted iterators.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;win_symbols&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;🥇🥈🥉🍺&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;win_symbols&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;  &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="https://docs.python.org/3/library/functions.html#next"&gt;https://docs.python.org/3/library/functions.html#next&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="example usage of jc" src="https://infrastructureascode.ch/images/202108_python_next.jpg"&gt;&lt;/p&gt;</content><category term="Brief_Byte"></category><category term="Python"></category></entry><entry><title>Build cron schedule expression online</title><link href="https://infrastructureascode.ch/build-cron-schedule-expression-online.html" rel="alternate"></link><published>2021-08-16T09:02:00+02:00</published><updated>2021-08-16T09:02:00+02:00</updated><author><name>ubaumann</name></author><id>tag:infrastructureascode.ch,2021-08-16:/build-cron-schedule-expression-online.html</id><content type="html">&lt;p&gt;&lt;a href="https://crontab.guru"&gt;crontab.guru&lt;/a&gt; is a nice online editor for cron schedule expressions.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://crontab.guru/#*/15_*_*_*_6,0"&gt;"every quarter hour on weekends only"&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="crontab.guru example" src="https://infrastructureascode.ch/images/202108_crontab.jpg"&gt;&lt;/p&gt;</content><category term="Brief_Byte"></category><category term="tools"></category></entry><entry><title>Python dataclass decorator</title><link href="https://infrastructureascode.ch/python-dataclass-decorator.html" rel="alternate"></link><published>2021-08-12T01:52:00+02:00</published><updated>2021-08-12T01:52:00+02:00</updated><author><name>ubaumann</name></author><id>tag:infrastructureascode.ch,2021-08-12:/python-dataclass-decorator.html</id><content type="html">&lt;p&gt;Python dataclass decorator adds automatically &lt;code&gt;__init__&lt;/code&gt;, &lt;code&gt;__repr__&lt;/code&gt; and &lt;code&gt;__eq__&lt;/code&gt; to the class.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3/library/dataclasses.html"&gt;https://docs.python.org/3/library/dataclasses.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="dataclass definition" src="https://infrastructureascode.ch/images/202108_python_dataclass1.jpg"&gt;&lt;img alt="dataclass usage" src="https://infrastructureascode.ch/images/202108_python_dataclass2.jpg"&gt;&lt;/p&gt;</content><category term="Brief_Byte"></category><category term="Python"></category></entry><entry><title>If you use "git log", remember a dog</title><link href="https://infrastructureascode.ch/if-you-use-git-log-remember-a-dog.html" rel="alternate"></link><published>2021-08-10T15:50:00+02:00</published><updated>2021-08-10T15:50:00+02:00</updated><author><name>ubaumann</name></author><id>tag:infrastructureascode.ch,2021-08-10:/if-you-use-git-log-remember-a-dog.html</id><summary type="html">&lt;p&gt;To get a nicely formatted git history &lt;code&gt;git log&lt;/code&gt; can be used in the terminal.
Just think about a dog, to remember the option for generating a readable graph.&lt;/p&gt;
&lt;p&gt;You can generate an alias for easier use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;config&lt;span class="w"&gt; &lt;/span&gt;--global&lt;span class="w"&gt; &lt;/span&gt;alias.dog&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;log --all --decorate --oneline --graph&amp;quot;&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;dog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;From …&lt;/p&gt;</summary><content type="html">&lt;p&gt;To get a nicely formatted git history &lt;code&gt;git log&lt;/code&gt; can be used in the terminal.
Just think about a dog, to remember the option for generating a readable graph.&lt;/p&gt;
&lt;p&gt;You can generate an alias for easier use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;config&lt;span class="w"&gt; &lt;/span&gt;--global&lt;span class="w"&gt; &lt;/span&gt;alias.dog&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;log --all --decorate --oneline --graph&amp;quot;&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;dog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;From the &lt;code&gt;git log --help&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;--all&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Pretend as if all the refs in refs/, along with HEAD, are listed on the command line as &lt;commit&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;--no-decorate, --decorate[=short|full|auto|no]&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Print out the ref names of any commits that are shown. If short is specified, the ref name prefixes
refs/heads/, refs/tags/ and refs/remotes/ will not be printed. If full is specified, the full ref name
(including prefix) will be printed. If auto is specified, then if the output is going to a terminal, the ref
names are shown as if short were given, otherwise no ref names are shown. The default option is short.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;--oneline&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is a shorthand for "--pretty=oneline --abbrev-commit" used together.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;--graph&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Draw a text-based graphical representation of the commit history on the left hand side of the output. This
may cause extra lines to be printed in between commits, in order for the graph history to be drawn properly.
Cannot be combined with --no-walk.
This enables parent rewriting, see History Simplification above.
This implies the --topo-order option by default, but the --date-order option may also be specified.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="crontab.guru example" src="https://infrastructureascode.ch/images/202108_git_log.jpg"&gt;&lt;/p&gt;</content><category term="Brief_Byte"></category><category term="git"></category></entry><entry><title>Python Security Considerations</title><link href="https://infrastructureascode.ch/python-security-considerations.html" rel="alternate"></link><published>2021-08-10T10:11:00+02:00</published><updated>2021-08-10T10:11:00+02:00</updated><author><name>ubaumann</name></author><id>tag:infrastructureascode.ch,2021-08-10:/python-security-considerations.html</id><content type="html">&lt;p&gt;The Python documentation has now a &lt;a href="https://docs.python.org/3.11/library/security_warnings.html"&gt;Security Considerations&lt;/a&gt; page.&lt;/p&gt;</content><category term="Brief_Byte"></category><category term="Python"></category></entry><entry><title>Calculate the logging level from the --verbose option count</title><link href="https://infrastructureascode.ch/calculate-the-logging-level-from-the-verbose-option-count.html" rel="alternate"></link><published>2021-07-31T12:04:00+02:00</published><updated>2021-07-31T12:04:00+02:00</updated><author><name>ubaumann</name></author><id>tag:infrastructureascode.ch,2021-07-31:/calculate-the-logging-level-from-the-verbose-option-count.html</id><content type="html">&lt;p&gt;Many CLI tools allow you to increase the verbosity level several times using the &lt;code&gt;--verbose|-v&lt;/code&gt; option. Counting the options and calculating the logging level is easy.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="small cli tool to print the verbose level" src="https://infrastructureascode.ch/images/202107_python_verbose_levle1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="example using the cli tool" src="https://infrastructureascode.ch/images/202107_python_verbose_levle2.jpg"&gt;&lt;/p&gt;</content><category term="Brief_Byte"></category><category term="Python"></category></entry><entry><title>Highlighting your search with grep</title><link href="https://infrastructureascode.ch/highlighting-your-search-with-grep.html" rel="alternate"></link><published>2020-07-17T13:28:00+02:00</published><updated>2020-07-17T13:28:00+02:00</updated><author><name>ubaumann</name></author><id>tag:infrastructureascode.ch,2020-07-17:/highlighting-your-search-with-grep.html</id><content type="html">&lt;p&gt;&lt;code&gt;grep&lt;/code&gt; can be used for highlighting your search. Use the extended-regexp option and add &lt;code&gt;"*|"&lt;/code&gt; (match everything) to your search pattern.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~#&lt;span class="w"&gt; &lt;/span&gt;ovs-vsctl&lt;span class="w"&gt; &lt;/span&gt;show&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;-E&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;*|vnet63|vnet60&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="highlight search term with grep" src="https://infrastructureascode.ch/images/202007_grep.png"&gt;&lt;/p&gt;</content><category term="Brief_Byte"></category><category term="tools"></category></entry></feed>